<?php

namespace App\Http\Controllers\API;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Models\Product;
use App\Models\Category;

class HomeController extends Controller
{
    public function getCategoryList(){
        $business_id = 1;
        $category = Category::where('business_id', $business_id)
                        ->where('parent_id', 0)
                        ->select(['name', 'short_code', 'description', 'id', 'parent_id'])->orderBy('name', 'asc')->get();

        return $category;
    }
    public function getNewProduct(){
        $products = Product::orderBy('created_at', 'asc')->limit(8)->get();
        return $products;
    }
    public function getDealsOfDay(){
        $products = Product::with(['category'])->orderBy('created_at', 'asc')->limit(3)->get();
        return $products;
    }
    public function getMainSliderProducts(){
        $products = [
                    ['link' => 'https://veeere.com', 'image' => '/media/1.jpg'],
                    ['link' => 'https://veeere.com', 'image' => '/media/2.jpg'],
                    ['link' => 'https://veeere.com', 'image' => '/media/3.jpg'],
        ];
        return $products;
    }
    public function getBestSellerProducts(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier');
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
        $products = $products->orderBy('products.created_at', 'asc')->limit(8)->get()->toArray();
        $data = [];
        $data0 = [];
        $data1 = [];
        $data2 = [];
        $data3 = [];
        foreach($products as $key => $product){
            if($key%2 == 0){
                $data0[] = $product;
            }
            if($key%2 == 1){
                $data1[] = $product;
            } 
        }
        $data = [
            $data0, $data1
        ];
        // echo '<pre>'; print_r($data); echo '</pre>'; die;
        return $data;
    }
    public function getNewArrivals(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier')
                ->where('category_id', '>', 5);
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
        $products = $products->orderBy('products.created_at', 'desc')->limit(8)->get()->toArray();
        $data = [];
        $data0 = [];
        $data1 = [];
        $data2 = [];
        $data3 = [];
        foreach($products as $key => $product){
            if($key%2 == 0){
                $data0[] = $product;
            }
            if($key%2 == 1){
                $data1[] = $product;
            } 
        }
        $data = [
            $data0, $data1
        ];
        // echo '<pre>'; print_r($data); echo '</pre>'; die;
        return $data;

        // $products = Product::with(['category'])->orderBy('created_at', 'asc')->inRandomOrder()->limit(8)->get();
        // return $products;
    }
    public function getTopSellings(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier')
                ->where('category_id', '<', 5);
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
        $products = $products->orderBy('products.created_at', 'desc')->limit(8)->get()->toArray();
        $data = [];
        $data0 = [];
        $data1 = [];
        $data2 = [];
        $data3 = [];
        foreach($products as $key => $product){
            if($key%2 == 0){
                $data0[] = $product;
            }
            if($key%2 == 1){
                $data1[] = $product;
            } 
        }
        $data = [
            $data0, $data1
        ];
        // echo '<pre>'; print_r($data); echo '</pre>'; die;
        return $data;
        // $products = Product::with(['category'])->orderBy('created_at', 'asc')->inRandomOrder()->limit(8)->get();
        // return $products;
    }
    public function getTopRated(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier');
                
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
        $products = $products->orderBy('products.created_at', 'asc')->limit(8)->get()->toArray();
        $data = [];
        $data0 = [];
        $data1 = [];
        $data2 = [];
        $data3 = [];
        foreach($products as $key => $product){
            if($key%2 == 0){
                $data0[] = $product;
            }
            if($key%2 == 1){
                $data1[] = $product;
            } 
        }
        $data = [
            $data0, $data1
        ];
        // echo '<pre>'; print_r($data); echo '</pre>'; die;
        return $data;
        // $products = Product::with(['category'])->orderBy('created_at', 'asc')->inRandomOrder()->limit(8)->get();
        // return $products;
    }
    public function getAllProducts(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier');
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
        $allProducts[] = [
            'name' => 'All',
            'slug' => 'all',
            'products' => $products->limit(8)->get()
        ];
        
        $cat = [1,2,3,5];
        $cat = [1,2,3];
        foreach($cat as $category){
            $c = Category::where('id', $category)->first();
            $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier')
                ->where('category_id', '=' ,$category);
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
                    
            $allProducts[] = [
                'name' => $c->name,
                'slug' => preg_replace('#[ -]+#', '-', trim(preg_replace("/[^A-Za-z0-9 ]/", "", $c->name))),
                'products' => $products->limit(8)->get()
            ];
        }
        return $allProducts;
    }   
    public function getCategories(){
        $categories = Category::where('parent_id', 0)
        ->orderBy('name', 'asc')
        ->limit(5)
        ->get()->toArray();
        $data = [];
        foreach($categories as $category){
            $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier');
                
            $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id');
            $data[] = [
                'cat' => $category,
                'sub_cat' => Category::where('parent_id', $category['id'])
                                ->orderBy('name', 'asc')
                                ->limit(5)
                                ->get()->toArray(),
                'product' => $products->where('category_id', "=", $category)->limit(5)->orderBy('products.name', 'asc')->get()
            ];
        }
        // echo '<pre>'; print_r($data); echo '</pre>'; die;
        return $data;
    } 
    public function getAllProductTesting(){
        $query = Product::leftJoin('brands', 'products.brand_id', '=', 'brands.id')
                ->join('units', 'products.unit_id', '=', 'units.id')
                ->leftJoin('categories as c1', 'products.category_id', '=', 'c1.id')
                ->leftJoin('categories as c2', 'products.sub_category_id', '=', 'c2.id')
                ->leftJoin('tax_rates', 'products.tax', '=', 'tax_rates.id')
                ->join('variations as v', 'v.product_id', '=', 'products.id')
                ->leftJoin('variation_location_details as vld', 'vld.variation_id', '=', 'v.id')
                ->where('products.type', '!=', 'modifier');
        $products = $query->select(
                    'products.id',
                    'products.name as product',
                    'products.type',
                    'c1.name as category',
                    'c2.name as sub_category',
                    'units.actual_name as unit',
                    'brands.name as brand',
                    'tax_rates.name as tax',
                    'products.sku',
                    'products.image',
                    'products.enable_stock',
                    'products.is_inactive',
                    'products.not_for_selling',
                    'products.product_custom_field1',
                    'products.product_custom_field2',
                    'products.product_custom_field3',
                    'products.product_custom_field4',
                    DB::raw('SUM(vld.qty_available) as current_stock'),
                    DB::raw('MAX(v.sell_price_inc_tax) as max_price'),
                    DB::raw('MIN(v.sell_price_inc_tax) as min_price'),
                    DB::raw('MAX(v.dpp_inc_tax) as max_purchase_price'),
                    DB::raw('MIN(v.dpp_inc_tax) as min_purchase_price')
    
                    )->groupBy('products.id')->get();
        dd($products);
        echo '<pre>'; print_r($query); echo '</pre>'; die;
    }
}
